"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3253],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>y});var a=n(6540);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=l,y=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(y,o(o({ref:t},c),{},{components:n})):a.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:l,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},695:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(8168),l=(n(6540),n(5680));const r={},o="Templates",i={unversionedId:"documentation/templates/overview",id:"documentation/templates/overview",title:"Templates",description:"Templates in Zelthy serve the same purpose as they do in Django or other web frameworks. They provide a way to separate the design or presentation layer from the business logic of your application. In Zelthy, you can use templates to generate HTML dynamically based on data and user interactions. Here's what you need to know about working with templates in Zelthy:",source:"@site/docs/documentation/templates/overview.mdx",sourceDirName:"documentation/templates",slug:"/documentation/templates/overview",permalink:"/docs/docs/documentation/templates/overview",draft:!1,editUrl:"https://github.com/Healthlane-Technologies/zelthy3/tree/documentation/docs/docs/documentation/templates/overview.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Assigning Route to a View",permalink:"/docs/docs/documentation/views-and-routes/assigning-route-to-a-view"},next:{title:"Models",permalink:"/docs/docs/documentation/ddms/overview"}},s={},p=[{value:"Directory",id:"directory",level:2},{value:"Template Syntax and Inheritance",id:"template-syntax-and-inheritance",level:2},{value:"Rendering",id:"rendering",level:2},{value:"sample_template.html",id:"sample_templatehtml",level:4},{value:"views.py",id:"viewspy",level:4},{value:"Static Files",id:"static-files",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,l.yg)(m,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"templates"},"Templates"),(0,l.yg)("p",null,"Templates in Zelthy serve the same purpose as they do in Django or other web frameworks. They provide a way to separate the design or presentation layer from the business logic of your application. In Zelthy, you can use templates to generate HTML dynamically based on data and user interactions. Here's what you need to know about working with templates in Zelthy:"),(0,l.yg)("h2",{id:"directory"},"Directory"),(0,l.yg)("p",null,"In Zelthy, template files should be placed inside a folder named \"templates\" within the module's folder. This structure helps keep your templates organized and accessible to Zelthy's template engine."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-text"},"workspaces\n\u251c\u2500\u2500 YourApp\n\u2502   \u251c\u2500\u2500 YourModule\n\u2502       \u251c\u2500\u2500 templates\n\u2502            \u251c\u2500\u2500 your_template.html\n\u2502   ...\n")),(0,l.yg)("h2",{id:"template-syntax-and-inheritance"},"Template Syntax and Inheritance"),(0,l.yg)("p",null,"Zelthy's template syntax closely resembles Django templates, making it familiar for developers acquainted with Django. You can use variables, control structures, and template tags to create dynamic and interactive HTML content. For example:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-html"},"\x3c!-- Variable --\x3e\n<p>{{ variable_name }}</p>\n\n\x3c!-- Control Structures --\x3e\n{% for item in items %}\n  <li>{{ item }}</li>\n{% endfor %}\n")),(0,l.yg)("p",null,"Just like Django, Zelthy supports template inheritance. You can create a base template with the common structure and elements and then extend it in other templates. This facilitates code reuse and helps in maintaining a consistent layout across your application. For instance:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plaintext"},"workspaces\n\u251c\u2500\u2500 YourApp\n\u2502   \u251c\u2500\u2500 YourModule\n\u2502       \u251c\u2500\u2500 templates\n\u2502            \u251c\u2500\u2500 base_template.html\n\u2502            \u251c\u2500\u2500 child_template.html\n\u2502   ...\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-html"},'\x3c!-- child_template.html --\x3e\n{% extends "base_template.html" %}\n\n{% block title %}Page Title{% endblock %}\n\n{% block content %}\n  <h1>Welcome to the page!</h1>\n{% endblock %}\n')),(0,l.yg)("h2",{id:"rendering"},"Rendering"),(0,l.yg)("p",null,"Zelthy uses a template engine to render templates. When a view function or class generates a response, it often includes data that needs to be inserted into a template. The template engine takes care of this process."),(0,l.yg)("p",null,"Example,"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plaintext"},"workspaces\n\u251c\u2500\u2500 YourApp\n\u2502   \u251c\u2500\u2500 YourModule\n\u2502       \u251c\u2500\u2500 templates\n\u2502            \u251c\u2500\u2500 sample_template.html\n\u2502       \u251c\u2500\u2500 views.py\n...\n")),(0,l.yg)("h4",{id:"sample_templatehtml"},"sample_template.html"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Zelthy Sample Template View</title>\n</head>\n<body>\n    <h1>List of Items</h1>\n    <ul>\n        {% for item in items %}\n            <li>{{ item }}</li>\n        {% endfor %}\n    </ul>\n</body>\n</html>\n')),(0,l.yg)("h4",{id:"viewspy"},"views.py"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},'\nfrom django.views.generic import TemplateView\n\nclass SampleTemplateView(TemplateView):\n    template_name = \'sample_template.html\'\n\n    def get_context_data(self, **kwargs):\n        # Sample data to be passed to the template\n        items = ["Item 1", "Item 2", "Item 3", "Item 4"]\n        context = super().get_context_data(**kwargs)\n        context[\'items\'] = items\n        return context\n')),(0,l.yg)("h2",{id:"static-files"},"Static Files"),(0,l.yg)("p",null,"Static files like CSS stylesheets, JavaScript files, and images can be served in Zelthy using the ",(0,l.yg)("inlineCode",{parentName:"p"},"{% zstatic %}")," template tag. You'll need to configure your project to handle static files properly."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-html"},'{% load zstatic %}\n<link rel="stylesheet" type="text/css" href="{% zstatic \'styles.css\' %}">\n')),(0,l.yg)("p",null,"In summary, templates in Zelthy follow the same principles as other web frameworks like Django. They provide a way to separate your application's logic from its presentation, making your code more maintainable and scalable. By using template tags, filters, and template inheritance, you can create dynamic and visually appealing web pages in your Zelthy applications."))}u.isMDXComponent=!0}}]);