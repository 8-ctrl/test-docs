"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[326],{5680:(e,t,r)=>{r.d(t,{xA:()=>y,yg:()=>d});var a=r(6540);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,i=function(e,t){if(null==e)return{};var r,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},y=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,i=e.mdxType,n=e.originalType,l=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),c=p(r),m=i,d=c["".concat(l,".").concat(m)]||c[m]||u[m]||n;return r?a.createElement(d,s(s({ref:t},y),{},{components:r})):a.createElement(d,s({ref:t},y))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=r.length,s=new Array(n);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<n;p++)s[p]=r[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6786:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>n,metadata:()=>o,toc:()=>p});var a=r(8168),i=(r(6540),r(5680));const n={sidebar_label:"Types of Views"},s="Types of Views in Zelthy",o={unversionedId:"documentation/views-and-routes/types-of-views",id:"documentation/views-and-routes/types-of-views",title:"Types of Views in Zelthy",description:"In Zelthy, views play a pivotal role in defining how your healthcare app interacts with users and processes data. These views can be broadly categorized into two main types: API Views and Template Views. Let's delve into these categories and explore their various subtypes.",source:"@site/docs/documentation/views-and-routes/types-of-views.mdx",sourceDirName:"documentation/views-and-routes",slug:"/documentation/views-and-routes/types-of-views",permalink:"/docs/docs/documentation/views-and-routes/types-of-views",draft:!1,editUrl:"https://github.com/Healthlane-Technologies/zelthy3/tree/documentation/docs/docs/documentation/views-and-routes/types-of-views.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Types of Views"}},l={},p=[{value:"API Views",id:"api-views",level:2},{value:"<mark> Type 1 API Views </mark>",id:"-type-1-api-views-",level:4},{value:"<mark> Type 2 API Views </mark>",id:"-type-2-api-views-",level:4},{value:"<mark> Type 3 API Views </mark>",id:"-type-3-api-views-",level:4},{value:"Template Views",id:"template-views",level:2},{value:"<mark> Type 1 Tempalte Views </mark>",id:"-type-1-tempalte-views-",level:4},{value:"<mark> Type 2 Tempalte Views </mark>",id:"-type-2-tempalte-views-",level:4},{value:"<mark> Type 3 Tempalte Views </mark>",id:"-type-3-tempalte-views-",level:4},{value:"<mark> Type 4 Tempalte Views </mark>",id:"-type-4-tempalte-views-",level:4}],y={toc:p},c="wrapper";function u(e){let{components:t,...r}=e;return(0,i.yg)(c,(0,a.A)({},y,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"types-of-views-in-zelthy"},"Types of Views in Zelthy"),(0,i.yg)("p",null,"In Zelthy, views play a pivotal role in defining how your healthcare app interacts with users and processes data. These views can be broadly categorized into two main types: API Views and Template Views. Let's delve into these categories and explore their various subtypes."),(0,i.yg)("h2",{id:"api-views"},"API Views"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"API Views")," are designed for handling requests and responses in a structured format, typically in JSON or XML. These views are instrumental in creating robust APIs to communicate with external systems or allow data exchange between different parts of your application. In Zelthy, API Views are further categorized into three main types:"),(0,i.yg)("mark",null,(0,i.yg)("h4",{id:"-type-1-api-views-"},(0,i.yg)("mark",null," Type 1 API Views ")),(0,i.yg)("h4",{id:"-type-2-api-views-"},(0,i.yg)("mark",null," Type 2 API Views ")),(0,i.yg)("h4",{id:"-type-3-api-views-"},(0,i.yg)("mark",null," Type 3 API Views ")),(0,i.yg)("h2",{id:"template-views"},"Template Views"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Template Views")," are used for rendering HTML templates and delivering web pages to users. They are responsible for creating the user interface and presenting data in a human-readable format. Zelthy offers several types of Template Views, each catering to specific needs within your healthcare app:"),(0,i.yg)("h4",{id:"-type-1-tempalte-views-"},(0,i.yg)("mark",null," Type 1 Tempalte Views ")),(0,i.yg)("h4",{id:"-type-2-tempalte-views-"},(0,i.yg)("mark",null," Type 2 Tempalte Views ")),(0,i.yg)("h4",{id:"-type-3-tempalte-views-"},(0,i.yg)("mark",null," Type 3 Tempalte Views ")),(0,i.yg)("h4",{id:"-type-4-tempalte-views-"},(0,i.yg)("mark",null," Type 4 Tempalte Views "))),(0,i.yg)("p",null,"In Zelthy, you have the flexibility to choose from these various view types and customize them to meet the specific requirements of your healthcare application. Whether you're building APIs to exchange data or crafting user interfaces for a seamless user experience, Zelthy's view system provides the tools you need for success."))}u.isMDXComponent=!0}}]);