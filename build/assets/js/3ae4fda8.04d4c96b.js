"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2793],{5680:(e,n,t)=>{t.d(n,{xA:()=>y,yg:()=>m});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},y=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,y=i(e,["components","mdxType","originalType","parentName"]),p=l(t),d=r,m=p["".concat(c,".").concat(d)]||p[d]||u[d]||o;return t?a.createElement(m,s(s({ref:n},y),{},{components:t})):a.createElement(m,s({ref:n},y))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9624:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=t(8168),r=(t(6540),t(5680));const o={sidebar_label:"Creating an Async Task"},s="Creating an Async Task",i={unversionedId:"documentation/async-tasks/creating-an-async-task",id:"documentation/async-tasks/creating-an-async-task",title:"Creating an Async Task",description:"In Zelthy, asynchronous tasks are defined as functions within a tasks.py file located inside any module folder of your application. These tasks leverage the @shared_task function decorator to indicate that they should be executed asynchronously.",source:"@site/docs/documentation/async-tasks/creating-an-async-task.mdx",sourceDirName:"documentation/async-tasks",slug:"/documentation/async-tasks/creating-an-async-task",permalink:"/docs/docs/documentation/async-tasks/creating-an-async-task",draft:!1,editUrl:"https://github.com/Healthlane-Technologies/zelthy3/tree/documentation/docs/docs/documentation/async-tasks/creating-an-async-task.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Creating an Async Task"},sidebar:"docsSidebar",previous:{title:"Async Tasks",permalink:"/docs/docs/documentation/async-tasks/overview"},next:{title:"Syncing and Viewing Async Task",permalink:"/docs/docs/documentation/async-tasks/syncing-and-viewing-async-tasks"}},c={},l=[{value:"Steps to Create an Async Task",id:"steps-to-create-an-async-task",level:4}],y={toc:l},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.yg)(p,(0,a.A)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"creating-an-async-task"},"Creating an Async Task"),(0,r.yg)("p",null,"In Zelthy, asynchronous tasks are defined as functions within a ",(0,r.yg)("inlineCode",{parentName:"p"},"tasks.py")," file located inside any module folder of your application. These tasks leverage the ",(0,r.yg)("inlineCode",{parentName:"p"},"@shared_task")," function decorator to indicate that they should be executed asynchronously."),(0,r.yg)("h4",{id:"steps-to-create-an-async-task"},"Steps to Create an Async Task"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Create a ",(0,r.yg)("inlineCode",{parentName:"strong"},"tasks.py")," File"),": Within the module folder of your app, create a file named ",(0,r.yg)("inlineCode",{parentName:"p"},"tasks.py"),". This file will contain the definition of your asynchronous tasks.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Define the Task Function"),": Inside the ",(0,r.yg)("inlineCode",{parentName:"p"},"tasks.py")," file, define your asynchronous task as a regular Python function. Use the ",(0,r.yg)("inlineCode",{parentName:"p"},"@shared_task")," decorator from Zelthy to mark the function as an asynchronous task."))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"# tasks.py\n\nfrom celery import shared_task\n\n@shared_task\ndef my_async_task():\n    # Task logic goes here\n    pass\n")),(0,r.yg)("ol",{start:3},(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Implement Task Logic"),": Within the task function, write the logic that you want to execute asynchronously. This could include database operations, API calls, file processing, or any other computationally intensive or time-consuming tasks.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Repeat as Needed"),": You can define any number of asynchronous tasks within the ",(0,r.yg)("inlineCode",{parentName:"p"},"tasks.py")," file. Each task should be defined as a separate function with the ",(0,r.yg)("inlineCode",{parentName:"p"},"@shared_task")," decorator."))),(0,r.yg)("p",null,"By following these steps, you can create and define asynchronous tasks in Zelthy, allowing you to offload time-consuming operations and improve the overall performance and responsiveness of your application."))}u.isMDXComponent=!0}}]);