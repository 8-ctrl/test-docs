"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[964],{5680:(e,n,t)=>{t.d(n,{xA:()=>y,yg:()=>m});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},y=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),u=l(t),p=r,m=u["".concat(c,".").concat(p)]||u[p]||g[p]||s;return t?a.createElement(m,i(i({ref:n},y),{},{components:t})):a.createElement(m,i({ref:n},y))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=p;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7590:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=t(8168),r=(t(6540),t(5680));const s={sidebar_label:"Manually Triggering Async Tasks"},i="Manually triggering Async Tasks",o={unversionedId:"documentation/async-tasks/manually-triggering-async-tasks",id:"documentation/async-tasks/manually-triggering-async-tasks",title:"Manually triggering Async Tasks",description:"Async tasks in Zelthy can be manually triggered from any part of your application's codebase. This provides flexibility in managing and executing tasks asynchronously as needed. Below are the steps to manually trigger an async task:",source:"@site/docs/documentation/async-tasks/manually-triggering-async-tasks.mdx",sourceDirName:"documentation/async-tasks",slug:"/documentation/async-tasks/manually-triggering-async-tasks",permalink:"/docs/docs/documentation/async-tasks/manually-triggering-async-tasks",draft:!1,editUrl:"https://github.com/Healthlane-Technologies/zelthy3/tree/documentation/docs/docs/documentation/async-tasks/manually-triggering-async-tasks.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Manually Triggering Async Tasks"},sidebar:"docsSidebar",previous:{title:"Syncing and Viewing Async Task",permalink:"/docs/docs/documentation/async-tasks/syncing-and-viewing-async-tasks"},next:{title:"Scheduling Async Tasks",permalink:"/docs/docs/documentation/async-tasks/scheduling-async-tasks"}},c={},l=[],y={toc:l},u="wrapper";function g(e){let{components:n,...t}=e;return(0,r.yg)(u,(0,a.A)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"manually-triggering-async-tasks"},"Manually triggering Async Tasks"),(0,r.yg)("p",null,"Async tasks in Zelthy can be manually triggered from any part of your application's codebase. This provides flexibility in managing and executing tasks asynchronously as needed. Below are the steps to manually trigger an async task:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Import the Task Executor"),":\nImport the ",(0,r.yg)("inlineCode",{parentName:"p"},"zelthy_task_executor")," function from the ",(0,r.yg)("inlineCode",{parentName:"p"},"zelthy.core.tasks")," module. This function is responsible for executing the async task."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from zelthy.core.tasks import zelthy_task_executor\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Call the Task Executor Function"),":\nCall the ",(0,r.yg)("inlineCode",{parentName:"p"},"zelthy_task_executor.delay()")," function and pass the required parameters. This function takes various arguments to specify the task to be executed and its parameters."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-python"},'zelthy_task_executor.delay(\n    request.tenant.name, \n    "triggers.tasks.send_communication",\n    // optional function parameters kwargs\n)\n')),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"request.tenant.name"),": The name of the tenant associated with the task."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},'"triggers.tasks.send_communication"'),": The path to the async task function to be executed.")))),(0,r.yg)("p",null,"By following these steps and providing the necessary parameters, you can manually trigger async tasks within your Zelthy application, enabling efficient and asynchronous processing of various operations."))}g.isMDXComponent=!0}}]);